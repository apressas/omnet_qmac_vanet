#!/usr/bin/env python

"""
Creates Makefile(s) for building Veins.
"""

import os
import sys
from subprocess import check_call
from logging import warning, error
from optparse import OptionParser
import fnmatch


# Option handling
parser = OptionParser()
parser.add_option("--with-inet", dest="inet", help="link Veins with a version of the INET Framework installed in PATH [default: do not link with INET]", metavar="PATH")
(options, args) = parser.parse_args()

if args:
    warning("Superfluous command line arguments: \"%s\"" % " ".join(args))


# Start with default flags
makemake_flags = ['-f', '--deep', '--no-deep-includes', '--make-so', '-I', '.', '-o', 'veins', '-O', 'out']
run_libs = [os.path.join('src', 'veins')]
run_neds = [os.path.join('src', 'veins')]


# Add flags for INET
if options.inet:
    fname = os.path.join(options.inet, 'Version')
    try:
        with open(fname, 'r') as file:
            version = file.read().rstrip()
            if not version == 'inet-2.3.0':
                warning('Unsupported INET Version. Expecting inet-2.3.0, found "%s"' % version)
    except IOError as e:
        error('Could not determine INET Version (from file %s): %s. Check the path to INET and the INET version (should be 2.3.0)' % (fname, e))
        sys.exit(1)

    inet_header_dirs = set()
    inet_src_path = os.path.join(options.inet, 'src')
    for root, dirnames, filenames in os.walk(inet_src_path):
        for filename in fnmatch.filter(filenames, '*.h'):
            inet_header_dirs.add(os.path.relpath(os.path.dirname(os.path.join(root, filename)), 'src'))
    inet_includes = ['-I' + s for s in inet_header_dirs]
    inet_link = ["-L" + os.path.join(os.path.relpath(options.inet, 'src'), 'src'), "-linet"]
    inet_defs = ["-DINET_IMPORT", "-DWITH_INET"]

    makemake_flags += inet_includes + inet_link + inet_defs
    run_libs = [os.path.relpath(os.path.join(options.inet, 'src', 'inet'))] + run_libs
    run_neds = [os.path.relpath(os.path.join(options.inet, 'src'))] + run_neds


# Start creating files
if not os.path.isdir('out'):
    os.mkdir('out')

f = open(os.path.join('out', 'config.py'), 'w')
f.write('run_libs = %s\n' % repr(run_libs))
f.write('run_neds = %s\n' % repr(run_neds))
f.close()

check_call(['env', 'opp_makemake'] + makemake_flags, cwd='src')

print 'Configure done. You can now run "make".'
